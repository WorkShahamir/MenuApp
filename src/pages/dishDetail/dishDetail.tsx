import { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axiosApi from "../../axiosApi";
import { IDish } from "../../types";
import {
    Button,
    Card,
    CardContent,
    CircularProgress,
    Typography,
    Box,
} from "@mui/material";

const DishDetail: React.FC = () => {
    const { id } = useParams<{ id: string }>();
    const navigate = useNavigate();
    const [dish, setDish] = useState<IDish | null>(null);
    const [loading, setLoading] = useState<boolean>(true);
    const [deleteLoading, setDeleteLoading] = useState<boolean>(false);

    useEffect(() => {
        const fetchDish = async () => {
            try {
                setLoading(true);
                console.log(`‚û° –ó–∞–≥—Ä—É–∂–∞—é –±–ª—é–¥–æ —Å ID: ${id}`);

                const response = await axiosApi.get(`/dishes/${id}.json`);

                console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Firebase:", response.data);

                if (!response.data) {
                    console.warn("‚ö† –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
                    setDish(null);
                    return;
                }

                setDish({ ...response.data, id });
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª—é–¥–∞:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchDish();
    }, [id]);

    const handleDelete = async () => {
        if (!id) return;
        if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –±–ª—é–¥–æ?")) {
            setDeleteLoading(true);
            try {
                await axiosApi.delete(`/dishes/${id}.json`);
                console.log("üóë –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ");
                navigate("/");
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª—é–¥–∞:", error);
            } finally {
                setDeleteLoading(false);
            }
        }
    };

    const handleEdit = () => {
        if (id) {
            navigate(`/dishes/${id}/edit`); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
        }
    };

    if (loading) return <CircularProgress />;
    if (!dish) return <Typography style={{ textAlign: "center" }}>‚ö† –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</Typography>;

    return (
        <Card sx={{ maxWidth: 500, margin: "auto", padding: 2 }}>
            <CardContent>
                <Typography variant="h4">{dish.name}</Typography>
                <Typography variant="body1">{dish.description}</Typography>
                <Typography variant="h6">–¶–µ–Ω–∞: {dish.price} —Å–æ–º</Typography>
                <Box sx={{ marginTop: 2, display: "flex", gap: 2 }}>
                    <Button
                        variant="contained"
                        color="primary"
                        onClick={handleEdit}
                        disabled={deleteLoading}
                    >
                        –ò–∑–º–µ–Ω–∏—Ç—å
                    </Button>
                    <Button
                        variant="contained"
                        color="error"
                        onClick={handleDelete}
                        disabled={deleteLoading}
                    >
                        {deleteLoading ? <CircularProgress size={24} /> : "–£–¥–∞–ª–∏—Ç—å"}
                    </Button>
                    <Button
                        variant="outlined"
                        onClick={() => navigate("/")}
                        disabled={deleteLoading}
                    >
                        –ù–∞–∑–∞–¥
                    </Button>
                </Box>
            </CardContent>
        </Card>
    );
};

export default DishDetail;